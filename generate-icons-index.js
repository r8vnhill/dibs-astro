// generate-icons-index.js
//
// This script scans the `src/assets/img/icons` directory for SVG files and automatically generates
// an `index.ts` file exporting each one using PascalCase names. This allows icon imports like:
//
//   import { Copy, TerminalWindow } from "~/assets/img/icons";
//
// Run manually with `pnpm generate-icons` or integrate into your build step.

import fs from "node:fs";
import path from "node:path";

// Path to the folder containing the .svg icon files
const ICONS_DIR = path.resolve("src/assets/img/icons");

// Path to the index.ts file to generate
const OUTPUT_FILE = path.join(ICONS_DIR, "index.ts");

// Header to prepend to the generated file, with a timestamp
const PREAMBLE = `// This file is auto-generated by the generate-icons-index.js script.
// Do not edit this file directly. Run 'pnpm generate-icons' to update it.
// Generated on ${new Date().toISOString()}
`;

/**
 * Converts a filename like `copy-icon.svg` or `terminal_window.svg` to PascalCase: CopyIcon,
 * TerminalWindow
 *
 * @param {string} filename - The SVG filename (e.g., "copy-icon.svg")
 * @returns {string} - PascalCase version without extension
 */
function toPascalCase(filename) {
  return filename
    .replace(/\.svg$/, "") // Remove .svg extension
    .replace(/(^\w|[-_]\w)/g, (match) =>
      match.replace(/[-_]/, "").toUpperCase()
    );
}

/**
 * Generates an `index.ts` file exporting all SVGs in ICONS_DIR using named exports based on
 * PascalCase identifiers.
 */
function generateExports() {
  // Get all .svg files in the directory
  const files = fs.readdirSync(ICONS_DIR).filter((f) => f.endsWith(".svg"));

  // Create a list of export lines like:
  // export { default as IconName } from "./icon-name.svg";
  const lines = files
    .sort()
    .map((f) => `export { default as ${toPascalCase(f)} } from "./${f}";`);

  // Write to the output file with header and export lines
  fs.writeFileSync(OUTPUT_FILE, PREAMBLE + lines.join("\n") + "\n");

  console.log(`âœ… Generated ${OUTPUT_FILE} with ${files.length} icons.`);
}

// Run the generator
generateExports();
