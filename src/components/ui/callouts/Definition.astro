---
import CalloutHeading from "./CalloutHeading.astro";
import type { BaseCalloutProps } from "./shared";
import * as Icons from "~/assets/img/icons";

type DefinitionProps = BaseCalloutProps;

/* -------------------- Resolve props & defaults -------------------- */
const {
  title = "Definici√≥n",
  icon: Icon = Icons.BookOpen,
  headingLevel = "h3",
  headingId,
  class: className = "",
  headingClass = "",
  iconClass = "",
  ariaLabel,
  compact = false,
  prose = true,
  // Any other attributes will be filtered and forwarded to <section>
  ...rest
} = Astro.props as DefinitionProps & Record<string, any>;

const resolvedHeadingId = headingId ?? `definition-${crypto.randomUUID()}`;

/**
 * Forward only safe/expected attributes to the <section> (e.g., id, data-*, aria-*).
 * This keeps the component flexible without opening it to accidental attribute leakage.
 */
const passthrough = Object.fromEntries(
  Object.entries(rest).filter(
    ([k]) => k === "id" || k.startsWith("data-") || k.startsWith("aria-")
  )
);
---

<section
  class:list={[
    "definition relative rounded-md shadow-sm",
    compact ? "px-4 py-3" : "px-5 py-4",
    className,
  ]}
  style={{
    // Pass resolved colors down to the child heading through CSS variables.
    "--callout-title-color": "var(--definition__title-color)",
    "--callout-icon-color": "var(--definition__title-color)",
  }}
  role="region"
  aria-labelledby={resolvedHeadingId}
  {...ariaLabel ? { "aria-label": ariaLabel } : {}}
  {...passthrough}
>
  <!-- Heading row (icon + title). -->
  <CalloutHeading
    Icon={Icon}
    heading={title}
    headingLevel={headingLevel}
    headingId={resolvedHeadingId}
    class={`definition__title ${headingClass}`}
    iconClass={`definition__icon ${iconClass}`}
  >
    <slot name="title">{title}</slot>
  </CalloutHeading>

  <!-- Body content. Enable `prose` when you want Typography styles. -->
  <div
    class:list={[
      "definition__body",
      prose &&
        "prose prose-neutral dark:prose-invert max-w-none prose-p:my-0 prose-p:leading-relaxed",
    ]}
  >
    <slot />
  </div>
</section>

<style scoped>
  /* ------------------------------------------------------------
     Local defaults for the definition color tokens.
     Override these globally in your theme to align with your palette.
     ------------------------------------------------------------ */
  :root {
    --definition__bg-color: #f8fafc; /* Light gray-blue background */
    --definition__border-color: #0ea5e9; /* Sky-500 border */
    --definition__title-color: #0369a1; /* Sky-700 title/icon */
  }

  :root.dark {
    --definition__bg-color: #0f172a; /* Slate-900 */
    --definition__border-color: #38bdf8; /* Sky-400 */
    --definition__title-color: #7dd3fc; /* Sky-300 */
  }

  /* ------------------------------------------------------------
     Base container styles (left border accent)
     ------------------------------------------------------------ */
  .definition {
    padding: 1rem 1.25rem;
    border-radius: 0.375rem;
    margin: 1rem 0;
    background-color: var(--definition__bg-color);
    border-left: 4px solid var(--definition__border-color);
  }

  /* definition:
     The rule below assumes you define *-dark variables globally (e.g., in a tokens.css).
     If you rely entirely on :root.dark overrides above, you can remove this block. */
  :global([data-theme="dark"]) :where(.definition) {
    background-color: var(--definition__bg-color-dark);
    border-left-color: var(--definition__border-color-dark);
  }

  /* ------------------------------------------------------------
     Body rhythm adjustments
     ------------------------------------------------------------ */
  .definition__body :where(p:first-child) {
    margin-top: 0;
  }
  .definition__body :where(p:last-child) {
    margin-bottom: 0;
  }
</style>
