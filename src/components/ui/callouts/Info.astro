---
import CalloutHeading from "./CalloutHeading.astro";
import type { BaseCalloutProps } from "./shared";
import * as Icons from "~/assets/img/icons";

type InfoProps = BaseCalloutProps;

/* -------------------- Resolve props & defaults -------------------- */
const {
  title = "Informaci√≥n",
  icon: Icon = Icons.Info,
  headingLevel = "h3",
  headingId,
  class: className = "",
  headingClass = "",
  iconClass = "",
  ariaLabel,
  compact = false,
  prose = true,
  // Any other attributes will be filtered and forwarded to <section>
  ...rest
} = Astro.props as InfoProps & Record<string, any>;

const resolvedHeadingId = headingId ?? `info-${crypto.randomUUID()}`;

/**
 * Forward only safe/expected attributes to the <section> (e.g., id, data-*, aria-*).
 * This keeps the component flexible without opening it to accidental attribute leakage.
 */
const passthrough = Object.fromEntries(
  Object.entries(rest).filter(
    ([k]) => k === "id" || k.startsWith("data-") || k.startsWith("aria-")
  )
);
---

<section
  class:list={[
    "info relative rounded-md shadow-sm",
    compact ? "px-4 py-3" : "px-5 py-4",
    className,
  ]}
  style={{
    // Pass resolved colors down to the child heading through CSS variables.
    "--callout-title-color": "var(--info__title-color)",
    "--callout-icon-color": "var(--info__title-color)",
  }}
  role="region"
  aria-labelledby={resolvedHeadingId}
  {...ariaLabel ? { "aria-label": ariaLabel } : {}}
  {...passthrough}
>
  <!-- Heading row (icon + title). -->
  <CalloutHeading
    Icon={Icon}
    heading={title}
    headingLevel={headingLevel}
    headingId={resolvedHeadingId}
    class={`info__title ${headingClass}`}
    iconClass={`info__icon ${iconClass}`}
  >
    <slot name="title">{title}</slot>
  </CalloutHeading>

  <!-- Body content. Enable `prose` when you want Typography styles. -->
  <div
    class:list={[
      "info__body",
      prose &&
        "prose prose-neutral dark:prose-invert max-w-none prose-p:my-0 prose-p:leading-relaxed",
    ]}
  >
    <slot />
  </div>
</section>

<style scoped>
  /* ------------------------------------------------------------
     Local defaults for the info color tokens.
     Override these globally in your theme to align with your palette.
     ------------------------------------------------------------ */
  :root {
    --info__bg-color: #eef6fc;
    --info__border-color: #3b82f6;
    --info__title-color: #1e3a8a;
  }

  /* If you manage dark mode by toggling `.dark` on :root, these serve as local defaults. */
  :root.dark {
    --info__bg-color: #0f172a;
    --info__border-color: #60a5fa;
    --info__title-color: #bfdbfe;
  }

  /* ------------------------------------------------------------
     Base container styles (left border accent)
     ------------------------------------------------------------ */
  .info {
    padding: 1rem 1.25rem;
    border-radius: 0.375rem;
    margin: 1rem 0;
    background-color: var(--info__bg-color);
    border-left: 4px solid var(--info__border-color);
  }

  /* info:
     The rule below assumes you define *-dark variables globally (e.g., in a tokens.css).
     If you rely entirely on :root.dark overrides above, you can remove this block. */
  :global([data-theme="dark"]) :where(.info) {
    background-color: var(--info__bg-color-dark);
    border-left-color: var(--info__border-color-dark);
  }

  /* ------------------------------------------------------------
     Body rhythm adjustments
     ------------------------------------------------------------ */
  .info__body :where(p:first-child) {
    margin-top: 0;
  }
  .info__body :where(p:last-child) {
    margin-bottom: 0;
  }
</style>
