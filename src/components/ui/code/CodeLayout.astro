---
/**
 * CodeLayout.astro
 * ----------------
 * Block de código con header opcional (título/fuente) y footer por slot.
 */
import { transformerColorizedBrackets } from "@shikijs/colorized-brackets";
import { transformerNotationErrorLevel, transformerNotationFocus } from "@shikijs/transformers";
import type { ShikiTransformer } from "shiki";
import type { availableLanguages } from "~/lib/shiki/highlighter";
import type { AstroComponentFactory } from "~/types/astro-component";
import CopyButton from "./CopyButton";
import DarkCode from "./DarkCode.astro";
import LightCode from "./LightCode.astro";

export interface CodeProps {
    code: string;
    lang: (typeof availableLanguages)[number];
    class?: string;
    title?: string;
    icon?: AstroComponentFactory;
    titleClasses?: string;
    source?: string;
    codeClasses?: string;
    transformers?: ShikiTransformer[];
    /** Extra clases para el pie si se usa el slot "footer" */
    footerClasses?: string;
}

export function normalizeIndentation(code: string): string {
    if (!code) throw new Error("Code content is required");
    const lines = code.split("\n");

    while (lines.length > 0 && lines[0]?.trim() === "") lines.shift();
    while (lines.length > 0 && lines.at(-1)?.trim() === "") lines.pop();

    const minIndent = Math.min(
        ...lines.filter(l => l.trim().length > 0).map(l => (l.match(/^[ \t]*/)?.[0].length ?? 0)),
        Infinity,
    );
    return Number.isFinite(minIndent) ? lines.map(l => l.slice(minIndent)).join("\n") : lines.join("\n");
}

const baseClasses = ["relative", "my-6", "overflow-x-auto", "rounded-md", "border", "border-primary"];

const baseTitleClasses = [
    "flex",
    "items-center",
    "gap-2",
    "border-b",
    "border-primary/30",
    "px-4",
    "py-2",
    "text-primary",
    "text-sm",
    "font-semibold",
    "tracking-wide",
    "dark:border-primary/40",
    "bg-base-background",
];

/** Estilos base para el pie */
const baseFooterClasses = [
    "flex",
    "items-start",
    "gap-2",
    "border-t",
    "border-primary/30",
    "px-4",
    "py-2",
    "text-primary/70",
    "dark:border-primary/40",
    "bg-base-background",
];

const {
    class: className = "",
    title,
    icon: Icon,
    titleClasses = "",
    source,
    code,
    lang,
    transformers = [],
    footerClasses = "",
} = Astro.props as CodeProps;

const normalizedCode = normalizeIndentation(code);

const commonTransformers = [
    transformerColorizedBrackets(),
    transformerNotationFocus(),
    transformerNotationErrorLevel(),
];
---

<div class:list={[...baseClasses, className]}>
    {
        (Astro.slots.title || Astro.slots.source || title || source) && (
            <div class:list={[...baseTitleClasses, titleClasses]}>
                {Icon && <Icon class:list={["h-5", "w-5", "shrink-0"]} />}
                {
                    Astro.slots.title ? (
                        <div class="truncate">
                            <slot name="title" />
                        </div>
                    ) : <span class="truncate">{title}</span>
                }
                {
                    (Astro.slots.source || source) && (
                        <span class:list={["ml-auto", "text-s", "font-mono", "text-primary/60", "italic", "truncate"]}>
                            {Astro.slots.source ? <slot name="source" /> : source}
                        </span>
                    )
                }
            </div>
        )
    }

    <div class="relative">
        <CopyButton client:load code={normalizedCode} />
        <LightCode
            transformers={[...commonTransformers, ...transformers]}
            {...{ code: normalizedCode, lang, codeClasses: "pr-12" }}
        />
        <DarkCode
            transformers={[...commonTransformers, ...transformers]}
            {...{ code: normalizedCode, lang, codeClasses: "pr-12" }}
        />
    </div>

    {
        Astro.slots.footer && (
            <div class:list={[...baseFooterClasses, footerClasses]}>
                <slot name="footer" />
            </div>
        )
    }
</div>
