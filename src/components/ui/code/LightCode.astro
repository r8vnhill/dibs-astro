---
/**
 * LightCode.astro
 * ---------------
 * Renders a Shiki-highlighted code block using the *catppuccin-latte* theme (for light mode).
 *
 * This component is visible only in light mode (`dark:hidden`).
 * Used internally by the `CodeLayout` wrapper to provide a light mode variant.
 *
 * Props:
 * - `code`: The raw code string to highlight.
 * - `lang`: The language to use for syntax highlighting (must match one in `availableLanguages`).
 * - `codeClasses`: Optional Tailwind classes to further style the `<Code>` component.
 */

import { Code } from "astro:components";
import { availableLanguages } from "~/lib/shiki/highlighter";
import { transformerColorizedBrackets } from "@shikijs/colorized-brackets";
import type { ShikiTransformer } from "shiki";
import { transformerNotationFocus } from "@shikijs/transformers";

// Component props definition
type Props = {
  code: string;
  lang: (typeof availableLanguages)[number];
  codeClasses?: string;
  transformers?: ShikiTransformer[];
};

// Destructure and default props
const { code, lang, codeClasses, transformers = [] } = Astro.props as Props;
---

<!-- Render the code block for light mode using the catppuccin-latte theme -->
<Code
  code={code}
  theme="catppuccin-latte"
  lang={lang}
  class:list={[
    "dark:hidden", // Only show in light mode
    "transition-colors", // Smooth color theme transitions
    "duration-200", // Duration for transitions
    "p-4", // Padding inside the code area
    "text-sm", // Font size
    "font-mono", // Monospaced font
    codeClasses, // Allow overrides from parent component
  ]}
  transformers={[
    transformerColorizedBrackets(),
    transformerNotationFocus(),
    ...transformers,
  ]}
  role="code"
  wrap
/>

<style is:global>
  pre.has-focused .line:not(.focused) {
    filter: blur(1px);
    transition: filter 0.2s ease;
  }
  pre.has-focused:hover .line:not(.focused) {
    filter: none;
  }

  pre .line {
    position: relative;
    padding-left: 0.75rem; /* espacio para el borde izquierdo */
  }

  pre.has-highlighted .line.highlighted {
    background-color: color-mix(in oklab, var(--muted), transparent 70%);
    transition:
      background-color 0.2s ease,
      box-shadow 0.2s ease;
  }

  pre.has-highlighted .line.highlighted.error {
    background-color: color-mix(in oklab, var(--error), transparent 88%);
    box-shadow: inset 2px 0 0 0 var(--error);
  }

  pre.has-highlighted .line.highlighted.warning {
    background-color: color-mix(in oklab, var(--warning), transparent 86%);
    box-shadow: inset 2px 0 0 0 var(--warning);
  }

  pre.has-highlighted .line.highlighted.error code,
  pre.has-highlighted .line.highlighted.error .token {
    color: var(--error-foreground);
  }
  pre.has-highlighted .line.highlighted.warning code,
  pre.has-highlighted .line.highlighted.warning .token {
    color: var(--warning-foreground);
  }
</style>
