---
/**
 * InlineCode.astro
 *
 * Inline code with dual Shiki themes (light/dark), zero client JS.
 * Extensible themes, optional colorized brackets, and small, testable surface.
 */

import { transformerColorizedBrackets } from "@shikijs/colorized-brackets";
import type { CodeLanguage } from "astro";
import { Code } from "astro:components";
import type { BundledTheme, ThemeRegistration, ThemeRegistrationRaw } from "shiki";

type Props = {
    code: string;
    lang?: CodeLanguage; // default: "txt"
    class?: string;
    /** Shiki themes (override from layout/page if needed) */
    themeLight?: BundledTheme | ThemeRegistration | ThemeRegistrationRaw; // default: "catppuccin-latte"
    themeDark?: BundledTheme | ThemeRegistration | ThemeRegistrationRaw; // default: "catppuccin-mocha"
    /** Toggle colorized bracket transformer */
    brackets?: boolean; // default: true
    /** Optional label for screen readers when snippet is not self-descriptive */
    ariaLabel?: string;
    /** Subtle "elevated" badge style to make inline code stand out (uses theme tokens). */
    elevate?: boolean;
};

const {
    code,
    lang = "txt",
    class: className = "",
    themeLight = "catppuccin-latte",
    themeDark = "catppuccin-mocha",
    brackets = true,
    ariaLabel,
    elevate = true,
} = Astro.props as Props;

const baseClass = [
    "inline-block",
    "align-[0.05em]",
    "leading-[1.4]",
    // Tailwind “token” utilities — keep visual identity consistent
    "text-[0.95em]",
    "font-mono",
    // small internal padding; elevation will add more visible padding if requested
    "rounded",
    "px-[2px]",
    "py-[0px]",
    "whitespace-nowrap",
    "bg-transparent", // or `bg-code` if you define one in your theme
].join(" ");

// extra classes for elevated badge effect (uses base tokens so light/dark are respected)
const elevateClasses = [
    "rounded",
    "border",
    "border-base-border/60",
    "bg-base-background/60",
    "px-1",
    "py-[1px]",
    "shadow-inner",
].join(" ");

const transformers = brackets ? [transformerColorizedBrackets()] : [];
const variants = [
    { wrapperClass: "dark:hidden", theme: themeLight },
    { wrapperClass: "hidden dark:inline", theme: themeDark },
];
---

<code
    class:list={[baseClass, elevate ? elevateClasses : "", className]} data-lang={lang}
    aria-label={ariaLabel}
>{
    variants.map(({ wrapperClass, theme }) => (
        <span class={wrapperClass}>
            <Code
                {code} {lang}
                inline {theme}
                class:list={["!bg-transparent", "!shadow-none"]} {transformers}
            />
        </span>
    ))
}</code>
