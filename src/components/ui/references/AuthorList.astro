---
/**
 * AuthorList.astro
 * ----------------
 * Displays a sorted and optionally truncated list of authors, with proper punctuation (commas and
 * "y" before the last author), and an optional "et al." suffix.
 */

import Author, { type AuthorProps } from "./Author.astro";

/**
 * Props accepted by AuthorList.
 */
type Props = {
  /**
   * The list of authors to display.
   */
  authors: AuthorProps[];
  /**
   * Optional threshold after which the list is truncated with "et al."
   */
  etAlAfter?: number;
};

/**
 * Sorts the authors alphabetically by last name (or fallback values if missing).
 *
 * Sorting is case-insensitive and locale-aware to ensure consistent ordering.
 *
 * @param authors - The unsorted list of authors.
 * @returns A new list sorted by lastName, then fullName, then firstName.
 */
function sortAuthorsByLastName(authors: AuthorProps[]): AuthorProps[] {
  return [...authors].sort((a, b) => {
    const aKey = a.lastName || a.fullName || a.firstName || "";
    const bKey = b.lastName || b.fullName || b.firstName || "";
    return aKey.localeCompare(bKey, undefined, { sensitivity: "base" });
  });
}

/**
 * Extracts a visible subset of authors and determines if "et al." should be shown.
 *
 * @param authors - Full list of authors.
 * @param etAlAfter - Number of authors to display before using "et al."
 * @returns An object containing the visible authors and a flag for "et al."
 */
function getVisibleAuthors(
  authors: AuthorProps[],
  etAlAfter: number
): { visibleAuthors: AuthorProps[]; showEtAl: boolean } {
  const showEtAl = authors.length > etAlAfter;
  const visibleAuthors = showEtAl ? authors.slice(0, etAlAfter) : authors;
  return { visibleAuthors, showEtAl };
}

// Read component props and apply defaults
const { authors, etAlAfter = 3 }: Props = Astro.props;

// Sort authors for consistent output
const sortedAuthors = sortAuthorsByLastName(authors);

// Determine visible authors and whether to append "et al."
const { visibleAuthors, showEtAl } = getVisibleAuthors(
  sortedAuthors,
  etAlAfter
);
---

<span>
  {
    visibleAuthors.map((author, index) => {
      const isLast = index === visibleAuthors.length - 1;
      const isSecondToLast = index === visibleAuthors.length - 2;

      return (
        <Fragment>
          <Author {...author} />
          {
            isLast
              ? ""
              : isSecondToLast
                ? " y "
                : ", "
          }
        </Fragment>
      );
    })
  }

  {showEtAl && " et al."}
</span>
