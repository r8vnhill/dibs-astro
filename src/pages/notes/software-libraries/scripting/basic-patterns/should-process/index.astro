---
import * as icons from "~/assets/img/icons";
import { Enquote, Heading, P } from "~/components/semantics";
import { Explanation, Important, Question } from "~/components/ui/callouts";
import { OutputBlock, PowerShellBlock, PowerShellInline } from "~/components/ui/code";
import { B, I, Mono } from "~/components/ui/font";
import { Footnote, FootnoteRef, Footnotes } from "~/components/ui/footnotes";
import { DibsSourceLink } from "~/components/ui/links";
import { List, ListItem } from "~/components/ui/list";
import NotesLayout from "~/layouts/NotesLayout.astro";
---

<NotesLayout
    title="Ensayo seguro (-WhatIf / -Confirm)"
    description="Cómo usar SupportsShouldProcess, -WhatIf y -Confirm para simular y confirmar cambios de forma segura."
    git={{ user: "r8vnhill", repo: "dibs-scripts" }}
>
    <Heading headingLevel="h2" Icon={icons.ShieldCheck}>
        Patrón de ensayo seguro (dry run)
    </Heading>

    <P>
        Antes de modificar archivos o crear estructuras, es buena práctica realizar un <Enquote>ensayo</Enquote> que
        muestre <I>qué</I> se haría sin hacerlo realmente. En PowerShell, este comportamiento se activa con
        <PowerShellInline code="-WhatIf" /> y <PowerShellInline code="-Confirm" />, gracias al atributo
        <PowerShellInline code="SupportsShouldProcess" />. Este patrón permite que un script pueda <B>simular o
            confirmar acciones potencialmente destructivas</B> antes de ejecutarlas, reduciendo riesgos y aumentando
        la confianza en su comportamiento.
    </P>

    <PowerShellBlock
        code={`
                #Requires -Version 7.5
                # [!code focus:2]
                [CmdletBinding(SupportsShouldProcess,
                    ConfirmImpact = 'Medium')]
                param(
                    # [!code focus:3]
                    [Parameter(Mandatory)]
                    [ValidateNotNullOrWhiteSpace()]
                    [string] $Name,

                    [Parameter(Mandatory)]
                    [ValidateNotNullOrWhiteSpace()]
                    [ValidateScript({ Test-Path -Path $_ -PathType Container })]
                    [string] $Path
                )

                # [!code focus:1]
                $base = $PSCmdlet.GetUnresolvedProviderPathFromPSPath($Path)
                $target = Join-Path $base $Name
                $readmePath = Join-Path $target 'README.md'
                # [!code focus:1]
                $helperPath = Join-Path $PSScriptRoot 'New-Readme.ps1' -Resolve

                $existsBefore = Test-Path -LiteralPath $readmePath -PathType Leaf
                $created = $false
                $skipped = $false

                if (!(Test-Path -LiteralPath $target -PathType Container)) {
                    New-Item -Path $target -ItemType Directory -Force | Out-Null
                }

                if (!$existsBefore) {
                    # [!code focus:5]
                    if ($PSCmdlet.ShouldProcess($readmePath, 'Create README.md')) {
                        $content = & $helperPath -Name $Name -Verbose:$PSBoundParameters['Verbose']
                        Set-Content -Path $readmePath -Encoding UTF8 -Value $content
                        $created = $true
                    }
                }
                else {
                    $skipped = $true
                }

                [PSCustomObject]@{
                    BasePath     = $base
                    TargetPath   = $target
                    ReadmePath   = $readmePath
                    HelperPath   = $helperPath
                    ExistsBefore = $existsBefore
                    Created      = $created
                    Skipped      = $skipped
                }
            `}
    >
        <Fragment slot="title">
            Initialize-Project (con <code>-WhatIf</code>)
        </Fragment>
        <DibsSourceLink
            repo="scripts" file="scaffolding/Initialize-Project.ps1"
            slot="source" ref="ae2ea81f7c7a376d2c05763dbba045e8644c0fca"
        />
    </PowerShellBlock>

    <Explanation headingLevel="h3">
        <List>
            <ListItem icon={icons.Shield}>
                <B><PowerShellInline code="SupportsShouldProcess" /></B> indica que el script admite los
                modificadores <PowerShellInline code="-WhatIf" /> y <PowerShellInline code="-Confirm" />. Cuando
                está presente, PowerShell ofrece automáticamente ambos parámetros, permitiendo al usuario decidir si
                desea <B>ver una simulación</B> (<PowerShellInline code="-WhatIf" />) o <B>confirmar
                    interactivamente</B> (<PowerShellInline code="-Confirm" />) antes de continuar.<FootnoteRef
                    index={1}
                />
            </ListItem>

            <ListItem icon={icons.CellSignalHigh}>
                <B><PowerShellInline code="ConfirmImpact" /></B> establece el <I>nivel de importancia</I> de las
                acciones que el comando realiza. Sus valores (<Mono>Low</Mono>, <Mono>Medium</Mono>, <Mono
                >High</Mono>) determinan cuándo PowerShell pedirá confirmación en función de la preferencia global
                del usuario (<PowerShellInline code="$ConfirmPreference" />). En este ejemplo, <Mono>Medium</Mono>
                indica que la operación —crear o modificar archivos— es potencialmente relevante, pero no
                destructiva.
            </ListItem>

            <ListItem icon={icons.CurrencyDollar}>
                <B><PowerShellInline code="$PSCmdlet.ShouldProcess()" /></B> es el método que pone en práctica el
                patrón. Es el punto del código donde se evalúa si la acción debe ejecutarse o solo simularse. Si el
                usuario invoca el script con <PowerShellInline code="-WhatIf" />, PowerShell mostrará un mensaje
                como:
                <Mono>What if: Performing the operation 'Create README.md' on target
                    'C:\\Projects\\Example\\README.md'.</Mono>
                Si usa <PowerShellInline code="-Confirm" />, se pedirá confirmación antes de ejecutar esa misma
                acción.
            </ListItem>

            <ListItem icon={icons.SlidersHorizontal}>
                <B><PowerShellInline code="-Switch:$variable" /></B> pasa un switch solo si la variable booleana es
                <PowerShellInline code="$true" />. Para <I>propagar</I> switches comunes a helpers, usa
                <PowerShellInline code="$PSBoundParameters" />: por ejemplo,
                <PowerShellInline code="-Verbose:$PSBoundParameters['Verbose']" /> (y, si el helper también los
                acepta, <PowerShellInline code="-WhatIf:$PSBoundParameters['WhatIf']" /> / <PowerShellInline
                    code="-Confirm:$PSBoundParameters['Confirm']"
                />).
            </ListItem>
        </List>
    </Explanation>

    <Important headingLevel="h3">
        <Fragment slot="title">Confirmación y simulación</Fragment>
        <P>
            El patrón <PowerShellInline code="ShouldProcess" /> combina los mecanismos de <B>simulación</B>
            (<PowerShellInline code="-WhatIf" />) y <B>confirmación interactiva</B> (<PowerShellInline
                code="-Confirm"
            />). Ambos se habilitan con <PowerShellInline code="SupportsShouldProcess" /> y se controlan mediante
            <PowerShellInline code="ConfirmImpact" /> y el método <PowerShellInline
                code="$PSCmdlet.ShouldProcess()"
            />.
        </P>

        <P>
            <PowerShellInline code="-WhatIf" /> permite verificar qué haría el comando sin ejecutar cambios reales,
            mientras que <PowerShellInline code="-Confirm" /> solicita autorización explícita antes de proceder.
            Estos mecanismos son esenciales en scripts que crean, modifican o eliminan recursos.
        </P>

        <List>
            <ListItem icon={icons.CheckCircle}>
                <PowerShellInline code="Low" /> → operaciones triviales (ej. lectura de datos).
            </ListItem>
            <ListItem icon={icons.FolderPlus}>
                <PowerShellInline code="Medium" /> → operaciones de creación o modificación.
            </ListItem>
            <ListItem icon={icons.Trash}>
                <PowerShellInline code="High" /> → operaciones destructivas o críticas (ej. eliminación de
                archivos).
            </ListItem>
        </List>
    </Important>

    <Heading headingLevel="h3" Icon={icons.TerminalWindow}>
        Ensayo seguro con <Mono>-WhatIf</Mono> y confirmación
    </Heading>

    <P>
        Antes de crear carpetas o archivos, prueba el comando con <PowerShellInline code="-WhatIf" /> para
        verificar <I>qué</I> haría el script sin realizar cambios reales. Si además quieres que el script <B
        >pida confirmación antes de ejecutar</B> cada acción, usa
        <PowerShellInline code="-Confirm" />.
    </P>

    <PowerShellBlock
        code={`
            ./scaffolding/Initialize-Project.ps1 -Name "Test" -Path "." -Verbose -WhatIf
        `}
    >
        <Fragment slot="title">Desde <Mono>dibs/scripts</Mono></Fragment>
    </PowerShellBlock>

    <OutputBlock
        code={`
            What if: Performing the operation "Create Directory" on target "Destination: /path/to/dibs/scripts/Test".
            What if: Performing the operation "Create README.md" on target "/path/to/dibs/scripts/Test/README.md".

            BasePath     : /path/to/dibs/scripts
            TargetPath   : /path/to/dibs/scripts/Test
            ReadmePath   : /path/to/dibs/scripts/Test/README.md
            HelperPath   : /path/to/dibs/scripts/scaffolding/New-Readme.ps1
            ExistsBefore : False
            Created      : False
            Skipped      : False
        `}
    >
        <span slot="title">Salida con <PowerShellInline code="-WhatIf" /></span>
    </OutputBlock>

    <Question headingLevel="h4">
        Prueba distintos valores de <PowerShellInline code="-Name" /> y <PowerShellInline code="-Path" /> junto con
        <PowerShellInline code="-WhatIf" />. ¿Qué sucede si el proyecto ya existe? ¿Y si la ruta no es válida?
    </Question>

    <Question headingLevel="h4">
        Ejecuta el script con <PowerShellInline code="-Confirm" /> para observar cómo el flujo de ejecución solicita
        autorización antes de crear los archivos.
    </Question>

    <Footnotes>
        <Footnote index={1}>
            Nota que <PowerShellInline code={`-Confirm`} /> hace que el script <B>solicite confirmación</B> antes de
            ejecutar una acción; <B>no significa que tú ya la estés confirmando.</B>
        </Footnote>
    </Footnotes>
</NotesLayout>
